worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /tmp/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
}

http {
    # Configure temp paths.
    proxy_temp_path /tmp/proxy_temp;
    client_body_temp_path /tmp/client_temp;
    fastcgi_temp_path /tmp/fastcgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    scgi_temp_path /tmp/scgi_temp;

    # Configure mime types and set defaults to octet stream
    # if mime type is unknown.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # Logging Settings
    ##
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    log_format homelab_access_log '[$time_local] - $http_host "$request" $status $body_bytes_sent - '
                                  '$remote_addr $remote_user - '
                                  '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log homelab_access_log;
    error_log /var/log/nginx/error.log notice;
    rewrite_log on;

    # For better file transfers without intermediate copies,
    # maximizing the packet MSS, and without any delays.
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    # Keep alive timeout.
    keepalive_timeout 65;
    # Enable gzip.
    gzip on;

    # Clear Server headers.
    more_clear_headers Server;

    # Hide Nginx Server version and name.
    server_tokens off;

    # Allow proxying websockets correctly.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Lua based Prometheus metrics collector.
    lua_shared_dict prometheus_metrics 100M;
    init_worker_by_lua_block {
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"request_host", "status"})
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"request_host"})
      metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
    }
    log_by_lua_block {
      metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
      metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    }

    # Include other config files that might be present.
    include /etc/nginx/conf.d/*.conf;
}
