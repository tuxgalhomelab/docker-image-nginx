#!/usr/bin/env bash
set -e -o pipefail

# Add repo specific metadata here.

PACKAGE_NAME="Nginx"
RELEASE_PACKAGE_NAME="Nginx"
RELEASE_TAG_PACKAGE_NAME="nginx"
UPSTREAM_IMAGE_CONFIG_KEY_PREFIX="BASE_IMAGE"
UPSTREAM_VERSION_MAIN_CONFIG_KEY="NGINX_VERSION"
UPSTREAM_VERSION_SUFFIX_CONFIG_KEY="NGINX_RELEASE_SUFFIX"
TEST_TYPE="background"
TEST_CONTAINER_TYPE="nginx"
TEST_CONTAINER_START_WAIT_SECONDS="10"

current_upstream_version() {
    local cur_ver_main=$(get_config_arg ${UPSTREAM_VERSION_MAIN_CONFIG_KEY:?})
    local cur_ver_suffix=$(get_config_arg ${UPSTREAM_VERSION_SUFFIX_CONFIG_KEY:?})
    echo "${cur_ver_main:?}-${cur_ver_suffix:?}"
}

latest_upstream_version() {
    local gpg_key_server=$(get_config_arg "NGINX_GPG_KEY_SERVER")
    local gpg_key=$(get_config_arg "NGINX_GPG_KEY")
    local gpg_key_path="$(get_config_arg "NGINX_GPG_KEY_PATH")"
    local nginx_repo=$(get_config_arg "NGINX_REPO")
    local nginx_release_distro=$(get_config_arg "NGINX_RELEASE_DISTRO")
    docker run --rm $(upstream_image_name) sh -c "homelab export-gpg-key ${gpg_key_server:?} ${gpg_key:?} ${gpg_key_path:?} >/dev/null 2>&1 && echo 'deb-src [signed-by=${gpg_key_path:?}] ${nginx_repo:?} ${nginx_release_distro:?} nginx' > /etc/apt/sources.list.d/src_nginx.list && rm /etc/apt/sources.list.d/debian.sources && apt-get -qq update >/dev/null 2>&1 && (apt-cache madison nginx | cut -d '|' -f 2 | cut -d ' ' -f 2 | sort --version-sort --reverse | head -1 | sed -E 's/^(.+)~${nginx_release_distro:?}$/\1/g')"
}

update_latest_upstream_version() {
    local cur_ver="${1:?}"
    local latest_ver="${2:?}"
    latest_ver_main=$(echo ${latest_ver:?} | cut --delimiter='-' --fields=1)
    latest_ver_suffix=$(echo ${latest_ver:?} | cut --delimiter='-' --fields=2)
    echo "Updating ${PACKAGE_NAME:?} '${cur_ver:?}' -> '${latest_ver:?}'"
    set_config_arg "${UPSTREAM_VERSION_MAIN_CONFIG_KEY:?}" "${latest_ver_main:?}"
    set_config_arg "${UPSTREAM_VERSION_SUFFIX_CONFIG_KEY:?}" "${latest_ver_suffix:?}"
    git add ${ARGS_FILE:?}
}

package_current_release_version() {
    current_upstream_version
}

test_start_container() {
    local container_name="${1:?}"
    docker run \
        --name ${container_name:?} \
        --detach \
        --rm \
        --publish 127.0.0.1:8082:80 \
        ${IMAGE:?}
}

test_image_after_container_startup() {
    local container_name="${1:?}"

    set +e
    local http_status_code=$(\
        curl -w "%{http_code}" --silent --output /dev/null --location http://127.0.0.1:8082/)
    local return_code=$?
    set -e

    if [[ $return_code != "0" ]]; then
        echo "Test failed: Obtained non-zero return code"
        echo "Output: ${http_status_code}"
        echo "Return Code: ${return_code}"
        test_cleanup_container ${container_name:?}
        exit 1
    fi
    if [[ ${http_status_code:?} != "200" ]]; then
        echo "Test failed: Status code is not 200"
        echo "Output: ${http_status_code}"
        echo "Return Code: ${return_code}"
        test_cleanup_container ${container_name:?}
        exit 1
    fi
}
